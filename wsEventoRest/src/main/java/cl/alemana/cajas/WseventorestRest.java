/*
 * Source: WseventorestRest.java - Generated by OBCOM SQL Wizard 1.150
 * Author: Alan Ociel Rodriguez Marianjel (ClÃ­nica Alemana de Santiago)
 *
 * Copyright (c) CLÃ�NICA ALEMANA DE SANTIAGO. All rights reserved.
 * 
 * All  rights  to this product are owned by CLÃ�NICA ALEMANA DE SANTIAGO and may
 * only be used under the terms of its associated license document. You may  NOT
 * copy,  modify,  sublicense,  or distribute this source file or portions of it
 * unless previously authorized in writing by CLÃ�NICA ALEMANA  DE  SANTIAGO.  In
 * any  event,  this notice and above copyright must always be included verbatim
 * with this file.
 */

package cl.alemana.cajas;

import java.util.logging.Level;
import java.util.logging.Logger;

import javax.annotation.Resource;
import javax.naming.InitialContext;
import javax.naming.NamingException;
//import javax.servlet.ServletContext;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import alemana.nucleo.anillo.vo.DataVO;


/**
 * The {@code Wseventorest} Rest Service.
 *
 * @author Alan Ociel Rodriguez Marianjel (ClÃ­nica Alemana de Santiago)
 */
@Path("/")
@Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
@Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
public class WseventorestRest
{
    /** The Logger of the Rest Service. */
    private static final Logger logger =
        Logger.getLogger(WseventorestRest.class.getName());

    /** The User Transaction of the Rest Service. */
    @Resource(name = "userTransaction")
    private UserTransaction userTransaction;

    /** The Data Source of the Rest Service. */
    @Resource(name = "ds/WSCAJAS")
    private DataSource dataSource;

    //--------------------------------------------------------------------------
    //-- Constructor Methods ---------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Constructs a new {@code WseventorestRest} instance.
     *
     * @param  context the Rest Service Application Servlet Context.
     * @throws NullPointerException if {@code context} is {@code null}.
     */
    /*public WseventorestRest(final ServletContext context)
    {
        // Get value of <context-param> defined in web.xml
        // String value = context.getInitParameter("param");
    }*/

    //--------------------------------------------------------------------------
    //-- Rest Service Methods --------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code PKG_EVENTOS_PPW.REGISTRA_EVENTO}.
     *
     * @param  request the request parameters of the procedure.
     * @return the output parameters and result sets of the procedure.
     * @throws Exception 
     * @throws InternalServerErrorException if an unexpected error occurs.
     */
    @POST
    @Path("/registraEvento")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response registraEvento(RegistraEventoRequest request) throws Exception
    {
    	DataVO data = new DataVO();
    	System.out.println(request.getData());
    	final RegistraEventoResult result;
    	
    	try {
            getUserTransaction().begin();
            try {
                result = RegistraEventoCaller.execute(getDataSource(), request);
            } catch (final Throwable callerThrowable) {
                getUserTransaction().rollback();
                throw callerThrowable;
            }
            getUserTransaction().commit();
        } catch (final Throwable thrown) {
            logError("Error executing registraEvento", thrown);            
            throw new Exception();
        }
    	
    	//data.mensaje = "success";
    	data.data = result;    	
		return Response.status(200).entity(data).build();
    }
    
    @POST
	@Path("/post")
	@Consumes("application/json")
	public Response createProductInJSON(String product) {

		String result = "Product created : " + product;
		return Response.status(201).entity(result).build();
		
	}

    //--------------------------------------------------------------------------
    //-- JNDI Methods ----------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Returns the user transaction of the Rest Service.
     *
     * @return the user transaction of the Rest Service.
     * @throws NamingException if a JNDI error occurs.
     */
    private UserTransaction getUserTransaction()
        throws NamingException
    {
        if (userTransaction == null) {
            final InitialContext context = new InitialContext();
            try {
                userTransaction = (UserTransaction) context.lookup("java:comp/UserTransaction");
            } finally {
                context.close();
            }
        }
        return userTransaction;
    }

    /**
     * Returns the data source of the Rest Service.
     *
     * @return the data source of the Rest Service.
     * @throws NamingException if a JNDI error occurs.
     */
    private DataSource getDataSource()
        throws NamingException
    {
        if (dataSource == null) {
            final InitialContext context = new InitialContext();
            try {
                dataSource = (DataSource) context.lookup("java:comp/env/ds/WSCAJAS");
                
            } finally {
                context.close();
            }
        }
        return dataSource;
    }

    //--------------------------------------------------------------------------
    //-- Error Methods ---------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Logs an error message with an associatted throwable.
     *
     * @param message a string that describes the error.
     * @param thrown a throwable associatted with the error.
     */
    private void logError(final String message, final Throwable thrown)
    {
        logger.log(Level.SEVERE, message, thrown);
    }

    /**
     * Returns an error response to send back to the client.
     *
     * @param  method the name of the method with error.
     * @return an error response to send back to the client.
     */
    private Response errorResponse(final String method)
    {
        return Response
            .serverError()
            .type(MediaType.TEXT_PLAIN)
            .entity("Error executing " + method)
            .build();
    }
}

/*
 * Source: RegistraEventoCaller.java - Generated by OBCOM SQL Wizard 1.150
 * Author: Alan Ociel Rodriguez Marianjel (ClÃ­nica Alemana de Santiago)
 *
 * Copyright (c) CLÃ�NICA ALEMANA DE SANTIAGO. All rights reserved.
 * 
 * All  rights  to this product are owned by CLÃ�NICA ALEMANA DE SANTIAGO and may
 * only be used under the terms of its associated license document. You may  NOT
 * copy,  modify,  sublicense,  or distribute this source file or portions of it
 * unless previously authorized in writing by CLÃ�NICA ALEMANA  DE  SANTIAGO.  In
 * any  event,  this notice and above copyright must always be included verbatim
 * with this file.
 */

package cl.alemana.cajas;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;
import javax.sql.DataSource;

/**
 * Caller of procedure {@code PKG_EVENTOS_PPW.REGISTRA_EVENTO}.
 *
 * @author Alan Ociel Rodriguez Marianjel (ClÃ­nica Alemana de Santiago)
 */
public class RegistraEventoCaller extends ProcedureCaller
{
    //--------------------------------------------------------------------------
    //-- Constructor Methods ---------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Constructs a new {@code RegistraEventoCaller} instance.
     */
    public RegistraEventoCaller()
    {
    }

    //--------------------------------------------------------------------------
    //-- Execute Methods -------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code PKG_EVENTOS_PPW.REGISTRA_EVENTO} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  request the request parameters of the procedure.
     * @return the output parameters and result sets of the procedure.
     * @throws NullPointerException if {@code request} is {@code null}.
     * @throws SQLException if an SQL error occurs.
     */
    public RegistraEventoResult executeProc(final DataSource dataSource, final RegistraEventoRequest request)
        throws SQLException
    {
        final Connection conn = dataSource.getConnection();
        try {
            return executeProc(conn, request);
        } finally {
            conn.close();
        }
    }

    /**
     * Executes procedure {@code PKG_EVENTOS_PPW.REGISTRA_EVENTO} using a connection.
     *
     * @param  conn the database connection.
     * @param  request the request parameters of the procedure.
     * @return the output parameters and result sets of the procedure.
     * @throws NullPointerException if {@code request} is {@code null}.
     * @throws SQLException if an SQL error occurs.
     */
    public RegistraEventoResult executeProc(final Connection conn, final RegistraEventoRequest request)
        throws SQLException
    {
        if (request == null)
            throw new NullPointerException("request is null");
        final RegistraEventoResult result = createProcResult();
        final String jdbcURL = getJdbcURL(conn);
        if (jdbcURL.startsWith("jdbc:oracle:")) {
            final CallableStatement call = prepareCall(conn, "{call PKG_EVENTOS_PPW.REGISTRA_EVENTO(?,?,?,?,?,?,?,?,?)}");
            try {
                call.setBigDecimal(1, request.getHolding());
                call.setBigDecimal(2, request.getOrigen());
                call.setBigDecimal(3, request.getTipoIdentificador());
                call.setString(4, request.getIdentificador());
                call.setBigDecimal(5, request.getIdTransaccion());
                call.setBigDecimal(6, request.getIdEvento());
                call.setClob(7, objToClob(request.getData(), conn));
                call.setBigDecimal(8, request.getCodError());
                call.registerOutParameter(8, Types.DECIMAL);
                call.setString(9, request.getMensaje());
                call.registerOutParameter(9, Types.VARCHAR);
                call.execute();
                result.setCodError(call.getBigDecimal(8));
                result.setGlosaError(call.getString(9));
            } finally {
                call.close();
            }
        } else {
            final CallableStatement call = prepareCall(conn, "{call PKG_EVENTOS_PPW$REGISTRA_EVENTO(?,?,?,?,?,?,?,?,?)}");
            try {
                call.setBigDecimal(1, request.getHolding());
                call.setBigDecimal(2, request.getOrigen());
                call.setBigDecimal(3, request.getTipoIdentificador());
                call.setString(4, request.getIdentificador());
                call.setBigDecimal(5, request.getIdTransaccion());
                call.setBigDecimal(6, request.getIdEvento());
                //call.setClob(7, stringToClob(request.getData(), conn));
                call.setClob(7, objToClob(request.getData(), conn));
                call.setBigDecimal(8, request.getCodError());
                call.registerOutParameter(8, Types.DECIMAL);
                call.setString(9, request.getMensaje());
                call.registerOutParameter(9, Types.VARCHAR);
                call.execute();
                result.setCodError(call.getBigDecimal(8));
                result.setGlosaError(call.getString(9));
            } finally {
                call.close();
            }
        }
        return result;
    }

    /**
     * Creates and returns a new instance of {@code RegistraEventoResult}.
     * <p>
     * Can be overridden to return a subtype of {@code RegistraEventoResult}.
     *
     * @return a new {@code RegistraEventoResult} instance.
     */
    protected RegistraEventoResult createProcResult()
    {
        return new RegistraEventoResult();
    }

    //--------------------------------------------------------------------------
    //-- Static Methods --------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code PKG_EVENTOS_PPW.REGISTRA_EVENTO} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  request the request parameters of the procedure.
     * @return the output parameters and result sets of the procedure.
     * @throws NullPointerException if {@code request} is {@code null}.
     * @throws SQLException if an SQL error occurs.
     */
    public static RegistraEventoResult execute(final DataSource dataSource, final RegistraEventoRequest request)
        throws SQLException
    {
        return new RegistraEventoCaller().executeProc(dataSource, request);
    }

    /**
     * Executes procedure {@code PKG_EVENTOS_PPW.REGISTRA_EVENTO} using a connection.
     *
     * @param  conn the database connection.
     * @param  request the request parameters of the procedure.
     * @return the output parameters and result sets of the procedure.
     * @throws NullPointerException if {@code request} is {@code null}.
     * @throws SQLException if an SQL error occurs.
     */
    public static RegistraEventoResult execute(final Connection conn, final RegistraEventoRequest request)
        throws SQLException
    {
        return new RegistraEventoCaller().executeProc(conn, request);
    }
}
